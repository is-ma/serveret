#! /bin/bash
# https://github.com/is-ma/serveret.git --branch v7.0.1

#################################################
#              A BUNCH OF SOFTWARE
#################################################
ISMA_PROMPT_COLORS=yes  # github: is-ma/prompt_colors
ISMA_GIT_SHORTCUTS=yes  # github: is-ma/git_shortcuts

UBUNTU_UPDATE=yes

TIME_SYNCHRONIZATION=yes
  timezone=America/Mexico_City  # more: timedatectl list-timezones

POSTGRESQL=yes
  asdf_version=0.11.2
  pg_version=11.7
  # PostgreSQL configuration
  pg_port=5432
  db_user=deploy                # same as your config/database.yml
  pg_reload_on_reboot=yes       # add a cronjob for you
  pg_allow_remote_access=yes    # if yes, limit access with UFW

RAILS=no
  ruby_version=2.5.1
  bundler_version=2.1.4
  nvm_version=0.35.3
  node_version=13.11.0
  rails_version=5.2.1

VARNISH_CACHE=no
  varnish_ver=varnish_6_4_xenial   # for now, only: varnish_6_4_xenial
  varnish_vcl=/vagrant/sample_app/default.vcl  # will be in your repository

ACK=no



#################################################
#              CUSTOMIZE A PROJECT
#       (USEFUL FOR STAGING/PRODUCTION)
#################################################
UFW=no  # see ideas below
  rules=()
  rules+=("allow ssh") # it's all you need from development
  rules+=("allow http")     # development/production
  rules+=("allow https")    # development/production
  #rules+=("ufw allow 8080") # development/production (useful with Varnish)
  #rules+=("allow from 111.111.111.111")  # staging (from dev machine)
  #rules+=("allow from 10.10.10.10 to any port 5432")  # production db
  #rules+=("allow from 10.10.10.11 to any port 5432")  # production db

NGINX_PASSENGER=no
  nginx_passenger_ubuntu_name=xenial   # for now, xenial is the only option

INSTALL_RAILS_APP=no
  passenger_app_env=staging  # staging/production
  passenger_listen_port=80
  passenger_friendly_error_pages=on  # on|off (appropriate for staging)
  app_repository='https://github.com/is-ma/hour-app.git --branch v1.0.4'
# NOTE 1
# You can test the example first, and later use your own app. You just need
# to assign your own repository in serveret.conf,
# run: psql -l
# run: dropdb hour_app_staging_db
# run: source ~/.serveret/mods/nginx_passenger/config_rails_app.sh
# NOTE 2
# Try cloning your repo first as a test. For private repos, use 'git'
# instead of 'https'; use 'ssh-keygen' and add it to the repo accepted keys.
# NOTE 3
# The included example works fine with the assigned software versions;
# however, for your real app, remember to have in place:
   #   - database.yml
   #   - secrets.yml
   #   - master.key
